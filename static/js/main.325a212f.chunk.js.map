{"version":3,"sources":["Header.tsx","MainLayout.tsx","MediaGrid.tsx","api.js","SheetsMediaGrid.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Header","className","MainLayout","header","children","props","MediaGrid","media","media_items","useMemo","map","item","i","key","progress","chapters","title","src","cover","alt","GridItem","DOC_KEY","a","GetSheetDone","labeledCols","sheet","data","GetMediaList","SheetsMediaGrid","useState","setMedia","console","log","useEffect","then","media_list","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sNAceA,MAZf,WACI,OACI,4BAAQC,UAAU,aACd,wBAAIA,UAAU,SAAd,cACA,yBAAKA,UAAU,OACX,oCACA,2C,eCWDC,EAZwC,SAAC,GAAD,EACnDD,UADmD,IAEnDE,EAFmD,EAEnDA,OACAC,EAHmD,EAGnDA,SACGC,EAJgD,wDAMnD,uCAAKJ,UAAS,gBAAsBI,GAC/BF,EACD,yBAAKF,UAAU,gBAAgBG,K,OC0BxBE,MA/Bf,YAAoD,IAAD,IAA9BC,aAA8B,MAAtB,GAAsB,EACzCC,EAAcC,kBAAQ,WAExB,OADcF,EAAMG,IAAI,SAACC,EAAMC,GAAP,OAehC,YAAiD,IAA7BD,EAA4B,EAA5BA,KAAME,EAAsB,EAAtBA,IAChBC,EAAQ,UAAM,EAAN,MAAaH,EAAKI,UAEhC,OACI,wBAAIF,IAAKA,EAAKZ,UAAU,cACpB,yBAAKA,UAAU,mBACX,2BAAIU,EAAKK,OAAS,iBAClB,2BAAIF,IAER,yBAAKG,IAAKN,EAAKO,OAAS,GAAIC,IAAI,GAAGlB,UAAU,sBAxBZmB,CAAS,CAAET,OAAME,IAAKD,OAE5D,CAACL,IAEJ,OAAO,wBAAIN,UAAU,cAAcO,I,uCCdjCa,EAAU,+C,2CAEhB,4BAAAC,EAAA,qEACwBC,IAAaC,YAAYH,EAAS,GAD1D,cACUI,EADV,yBAEWA,EAAMC,MAFjB,0C,sBAKeC,M,2CCUAC,EAZkD,WAAO,IAAD,EACzCC,mBAAkB,IADuB,mBAC5DtB,EAD4D,KACrDuB,EADqD,KASnE,OAPAC,QAAQC,IAAI,UAEZC,oBAAU,WACNN,IAAeO,KAAK,SAAAC,GAChBL,EAASK,MAEd,IACI,kBAAC,EAAD,CAAW5B,MAAOA,KCCd6B,MAVf,WACI,OACI,yBAAKnC,UAAU,OACX,kBAAC,EAAD,CAAYE,OAAQ,kBAAC,EAAD,OAChB,kBAAC,EAAD,SCCIkC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4HzC,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMd,KAAK,SAAAe,GAC/BA,EAAaC,gB","file":"static/js/main.325a212f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"mw-header\">\r\n            <h1 className=\"title\">MangaWatch</h1>\r\n            <div className=\"nav\">\r\n                <h2>User</h2>\r\n                <h2>Settings</h2>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { FunctionComponent } from 'react'\r\n\r\ntype MainLayoutProps = {\r\n    className?: String\r\n    header: React.ReactNode\r\n}\r\n\r\nconst MainLayout: FunctionComponent<MainLayoutProps> = ({\r\n    className,\r\n    header,\r\n    children,\r\n    ...props\r\n}) => (\r\n    <div className={`main-layout `} {...props}>\r\n        {header}\r\n        <div className='main-content'>{children}</div>\r\n    </div>\r\n)\r\n\r\nexport default MainLayout\r\n","import React, { useMemo } from 'react'\r\nimport Media from './Media'\r\n\r\ntype MediaGridProps = {\r\n    media: Media[]\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction MediaGrid({ media = [] }: MediaGridProps) {\r\n    const media_items = useMemo(() => {\r\n        const items = media.map((item, i) => GridItem({ item, key: i }))\r\n        return items\r\n    }, [media])\r\n\r\n    return <ul className=\"media-grid\">{media_items}</ul>\r\n}\r\n\r\ntype GridItemProps = {\r\n    item: Media\r\n    key: string | number\r\n}\r\n\r\n/**\r\n * Display a single cover for some peice of media\r\n */\r\nfunction GridItem({ item, key }: GridItemProps) {\r\n    const progress = `${1} / ${item.chapters}`\r\n\r\n    return (\r\n        <li key={key} className=\"media-item\">\r\n            <div className=\"media-item-text\">\r\n                <p>{item.title || 'MISSING TITLE'}</p>\r\n                <p>{progress}</p>\r\n            </div>\r\n            <img src={item.cover || ''} alt=\"\" className=\"media-item-cover\" />\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default MediaGrid\r\n","import GetSheetDone from 'get-sheet-done'\r\n\r\nconst DOC_KEY = '1h64ICq9bDipGdd8Wz_ZvdPrnh3CAOTixMrZINzUsTiY'\r\n\r\nasync function GetMediaList() {\r\n    const sheet = await GetSheetDone.labeledCols(DOC_KEY, 1)\r\n    return sheet.data\r\n}\r\n\r\nexport default GetMediaList\r\n","import React, { FunctionComponent, useEffect, useState } from 'react'\r\nimport MediaGrid from './MediaGrid'\r\nimport GetMediaList from './api'\r\nimport Media from './Media'\r\n\r\ntype SheetsMediaGridProps = {}\r\n\r\nconst SheetsMediaGrid: FunctionComponent<SheetsMediaGridProps> = () => {\r\n    const [media, setMedia] = useState<Media[]>([])\r\n    console.log('render')\r\n\r\n    useEffect(() => {\r\n        GetMediaList().then(media_list => {\r\n            setMedia(media_list)\r\n        })\r\n    }, [])\r\n    return <MediaGrid media={media} />\r\n}\r\n\r\nexport default SheetsMediaGrid\r\n","import React from 'react'\nimport Header from './Header'\n\nimport './App.css'\nimport MainLayout from './MainLayout'\nimport SheetsMediaGrid from './SheetsMediaGrid'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <MainLayout header={<Header />}>\n                <SheetsMediaGrid />\n            </MainLayout>\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}
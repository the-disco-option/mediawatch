{"version":3,"sources":["assets/nocover.jpeg","components/Cover/Cover.tsx","components/Cover/LinkCover.tsx","components/MediaGrid/MediaGrid.tsx","types/SheetsAPI.ts","api/sheets/sheets.ts","types/Media.ts","api.ts","components/Loading/Loading.tsx","components/MediaGrid/SheetsMediaGrid.tsx","pages/App.tsx","components/ChaptersInput/ChaptersInput.tsx","components/MediaInfo/MediaInfo.tsx","pages/MediaInfo/MediaInfo.tsx","MainLayout.tsx","components/Header.tsx","routing/AppRouter.tsx","serviceWorker.js","GlobalProvider.tsx","index.js","components/MediaInfo/MediaInfo.module.css","components/Cover/Cover.module.css","components/Loading/Loading.module.css"],"names":["module","exports","Cover","className","cover","nocover","chapters","chapters_read","title","_key","is_reading","progress_reading","progress_unread","key","styles","text","src","alt","draggable","image","LinkCover","basepath","id","props","destination","to","MediaGrid","media","media_items","useMemo","map","chaptersread","entry_schema","object","shape","$t","string","response_schema","feed","updated","date","entry","array","of","buildSheetsUrl","doc_id","sheet_number","fetchSheet","a","url","fetch","response","json","raw_data","cast","message","parseResponse","raw","data","prefix","res","Object","keys","forEach","indexOf","label","substr","length","removeKeyPrefix","retrive","raw_sheet","sheet","media_schema","yup","notRequired","integer","default","DOC_KEY","fetchGlobalMediaList","medialist","err","filter","notUndefined","hasId","fetchUserMediaList","userdatalist","Promise","all","global_media","user_media","global_map","Map","g","user_map","u","combineUserData","global_data","user_data","combined_data","set","user","get","Array","from","values","item","Boolean","Loading","console","log","container","SheetsMediaGrid","useGlobal","setMedia","useEffect","fetchCombinedMediaList","then","combined_list","catch","reason","error","GridComp","LoadingComp","App","ChaptersInput","max","onSubmit","onChange","defaultValue","inputEl","useRef","handleSubmit","useCallback","e","preventDefault","stopPropagation","value","current","Number","parseInt","handleChange","toString","type","min","ref","MediaInfo","grid","infoGrid","bottom","MediaInfoRoute","match","staticContext","medias","find","m","params","MainLayout","header","children","Header","AppRouter","basename","exact","path","name","component","window","location","hostname","Provider","createProvider","ReactDOM","render","GlobalProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b0c982c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nocover.4a631526.jpeg\";","import React from 'react'\r\nimport Media from '../../types/Media'\r\nimport styles from './Cover.module.css'\r\nimport nocover from '../../assets/nocover.jpeg'\r\n\r\nexport interface CoverProps extends Media {\r\n    chapters_read?: number\r\n    _key?: string | number\r\n    className?: string\r\n}\r\n\r\n/**\r\n * Display a single cover for some peice of media\r\n */\r\nfunction Cover({\r\n    className,\r\n    cover = nocover,\r\n    chapters = 0,\r\n    chapters_read = 0,\r\n    title = 'MISSING TITLE',\r\n    _key,\r\n}: CoverProps) {\r\n    const is_reading = chapters_read > 0\r\n\r\n    const progress_reading = `${chapters_read} / ${chapters}`\r\n    const progress_unread = `${chapters} Chapters`\r\n\r\n    return (\r\n        <li key={_key} className={`${styles.cover} ${className}`}>\r\n            <div className={styles.text}>\r\n                <p>{title}</p>\r\n                <p>{is_reading ? progress_reading : progress_unread}</p>\r\n            </div>\r\n            <img\r\n                src={cover}\r\n                alt=''\r\n                draggable={false}\r\n                className={styles.image}\r\n            />\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Cover\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Cover, { CoverProps } from './Cover'\r\n\r\ninterface LinkCoverProps extends CoverProps {\r\n    basepath?: string\r\n    chapters_read?: number\r\n    _key?: string | number\r\n}\r\n\r\nfunction LinkCover({\r\n    chapters_read,\r\n    basepath = '/media/',\r\n    _key,\r\n    id,\r\n    ...props\r\n}: LinkCoverProps) {\r\n    const destination = basepath + id\r\n    return (\r\n        <Link to={destination} key={_key}>\r\n            <Cover chapters_read={chapters_read} id={id} {...props}></Cover>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default LinkCover\r\n","import React, { useMemo } from 'react'\r\nimport { UserMedia } from '../../types/Media'\r\nimport LinkCover from '../Cover/LinkCover'\r\n\r\ntype MediaGridProps = {\r\n    media?: UserMedia[]\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction MediaGrid({ media = [] }: MediaGridProps) {\r\n    const media_items = useMemo(() => {\r\n        return media.map(media => {\r\n            return LinkCover({\r\n                chapters_read: media.chaptersread,\r\n                _key: media.id,\r\n                ...media,\r\n            })\r\n        })\r\n    }, [media])\r\n\r\n    return <ul className='media-grid'>{media_items}</ul>\r\n}\r\n\r\nexport default MediaGrid\r\n","import { object, array, InferType, string, date } from 'yup'\r\n\r\nconst entry_schema = object().shape({\r\n    title: object().shape({\r\n        $t: string(),\r\n    }),\r\n})\r\n\r\nconst response_schema = object().shape({\r\n    feed: object().shape({\r\n        title: object().shape({\r\n            $t: string(),\r\n        }),\r\n        updated: object().shape({\r\n            $t: date(),\r\n        }),\r\n        entry: array().of(entry_schema),\r\n    }),\r\n})\r\n\r\n/**\r\n * Response from the sheets api\r\n */\r\nexport type Response = InferType<typeof response_schema>\r\n\r\n/**\r\n * A single entry in the respose list\r\n */\r\nexport type Entry = InferType<typeof entry_schema>\r\n\r\nexport { response_schema, entry_schema }\r\n","import {\r\n    Entry as SheetsEntry,\r\n    Response as SheetsResponse,\r\n    response_schema,\r\n} from '../../types/SheetsAPI'\r\n\r\nfunction buildSheetsUrl(doc_id: string, sheet_number: number) {\r\n    return `https://spreadsheets.google.com/feeds/list/${doc_id}/${sheet_number}/public/values?alt=json`\r\n}\r\n\r\nexport async function fetchSheet(doc_id: string, sheet_number: number) {\r\n    const url = buildSheetsUrl(doc_id, sheet_number)\r\n\r\n    try {\r\n        const response = await fetch(url)\r\n        const raw_data = await response.json()\r\n        return response_schema.cast(raw_data)\r\n    } catch (error) {\r\n        error.message += 'Failed to fetch sheet:'\r\n        error.doc_id = doc_id\r\n        error.sheet_number = sheet_number\r\n        throw error\r\n    }\r\n}\r\n\r\nexport function parseResponse(raw: SheetsResponse) {\r\n    const data = parseLabeledCols(raw.feed.entry)\r\n    const res = {\r\n        title: raw.feed.title.$t,\r\n        updated: raw.feed.updated.$t,\r\n        data,\r\n    }\r\n    return res\r\n}\r\n\r\n/**\r\n * Remove the given prefix from where\r\n */\r\nfunction removeKeyPrefix(entry: SheetsEntry, prefix: string): object {\r\n    const res: any = {}\r\n    Object.keys(entry).forEach(key => {\r\n        if (key.indexOf(prefix) === 0) {\r\n            const label = key.substr(prefix.length)\r\n            res[label] = (entry as any)[key].$t\r\n        }\r\n    })\r\n    return res\r\n}\r\n\r\n/**\r\n * Parser for table where just the columns are labeled\r\n * @return array of objects where the labels are keys\r\n */\r\nfunction parseLabeledCols(entries: SheetsEntry[]) {\r\n    return entries.map(entry => removeKeyPrefix(entry, 'gsx$'))\r\n}\r\n\r\n/**\r\n * Retrive data from a google docs DB.\r\n * Each row is treated as an object, with the top columns being the object keys and the others being the values\r\n */\r\nexport async function retrive(doc_id: string, sheet_number: number) {\r\n    const raw_sheet = await fetchSheet(doc_id, sheet_number)\r\n    const sheet = parseResponse(raw_sheet)\r\n    return sheet\r\n}\r\n","import * as yup from 'yup'\r\n\r\nconst media_schema = yup.object().shape({\r\n    id: yup.string(),\r\n    title: yup.string().notRequired(),\r\n    chapters: yup\r\n        .number()\r\n        .integer()\r\n        .notRequired(),\r\n    cover: yup\r\n        .string()\r\n        .url()\r\n        .notRequired(),\r\n})\r\n\r\nconst user_media_schema = yup.object().shape({\r\n    id: yup.string(),\r\n    chaptersread: yup\r\n        .number()\r\n        .integer()\r\n        .notRequired()\r\n        .default(0),\r\n})\r\n\r\n/**\r\n * Represents a single peice of serializeable media (it has chapters)\r\n */\r\ntype Media = yup.InferType<typeof media_schema>\r\n\r\n/**\r\n * Represents the data a user has for this media.\r\n * Mostly used to see how many chapters a user has read.\r\n * In future it can be used for\r\n */\r\nexport type UserMedia = yup.InferType<typeof user_media_schema>\r\n\r\nexport type MediaOrUndefined = Media | undefined\r\n\r\nexport interface MediaData extends Media, UserMedia {}\r\n\r\nexport default Media\r\nexport { media_schema, user_media_schema }\r\n","import { retrive } from './api/sheets/sheets'\r\nimport Media, { UserMedia, MediaData, media_schema } from './types/Media'\r\n\r\nconst DOC_KEY = '1h64ICq9bDipGdd8Wz_ZvdPrnh3CAOTixMrZINzUsTiY'\r\n\r\nexport async function fetchGlobalMediaList() {\r\n    const sheet = await retrive(DOC_KEY, 1)\r\n    const medialist: Media[] = sheet.data as any[]\r\n\r\n    const cast = (media: Media): Media => {\r\n        try {\r\n            return media_schema.cast(media)\r\n        } catch (err) {}\r\n        return media\r\n    }\r\n\r\n    return medialist\r\n        .map(cast)\r\n        .filter(notUndefined)\r\n        .filter(hasId)\r\n}\r\n\r\nexport async function fetchUserMediaList() {\r\n    const sheet = await retrive(DOC_KEY, 2)\r\n    const userdatalist: UserMedia[] = sheet.data as any[]\r\n\r\n    return userdatalist.filter(notUndefined).filter(hasId)\r\n}\r\n\r\nexport async function fetchCombinedMediaList() {\r\n    const [global_media, user_media] = await Promise.all([\r\n        fetchGlobalMediaList(),\r\n        fetchUserMediaList(),\r\n    ])\r\n\r\n    const global_map = new Map(global_media.map(g => [g.id, g]))\r\n    const user_map = new Map(user_media.map(u => [u.id, u]))\r\n\r\n    return combineUserData(global_map, user_map)\r\n}\r\n\r\nexport async function getGlobalMedia(id: string) {\r\n    const medialist = await fetchGlobalMediaList()\r\n    const result = medialist.find(media => media.id === id)\r\n    if (!result) throw new Error(`Could not find global media with id \"${id}\"`)\r\n    return result\r\n}\r\n\r\nexport async function getUserMedia(id: string) {\r\n    const medialist = await fetchUserMediaList()\r\n    const result = medialist.find(media => media.id === id)\r\n    if (!result) throw new Error(`Could not find user media with id \"${id}\"`)\r\n    return result\r\n}\r\n\r\n/**\r\n * Find user data for the given media, if it exits\r\n */\r\nfunction combineUserData(\r\n    global_data: Map<String, Media>,\r\n    user_data: Map<String, UserMedia>\r\n): MediaData[] {\r\n    const combined_data = new Map<String, MediaData>()\r\n\r\n    global_data.forEach(media => {\r\n        combined_data.set(media.id, media)\r\n    })\r\n\r\n    user_data.forEach(user => {\r\n        const media = global_data.get(user.id)\r\n        if (media) {\r\n            combined_data.set(user.id, {\r\n                ...media,\r\n                ...user,\r\n            })\r\n        }\r\n    })\r\n\r\n    return Array.from(combined_data.values())\r\n}\r\n\r\nfunction notUndefined<T>(item: T): item is T {\r\n    return Boolean(item)\r\n}\r\n\r\ntype ObjectWithId = {\r\n    id: string\r\n}\r\n\r\nconst hasId = (item: ObjectWithId) => Boolean(item.id)\r\n","import React from 'react'\r\n\r\nimport styles from './Loading.module.css'\r\n\r\ninterface LoadingProps {\r\n    className?: string\r\n}\r\n\r\nfunction Loading({ className, ...props }: LoadingProps) {\r\n    console.log('load')\r\n    return (\r\n        <div className={`${styles.container} ${className || ''}`} {...props}>\r\n            <h1 className={styles.text}>Loading...</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading\r\n","import React, { FunctionComponent, useEffect } from 'react'\r\nimport { useGlobal } from 'reactn'\r\nimport MediaGrid from './MediaGrid'\r\nimport { fetchCombinedMediaList } from '../../api'\r\nimport Loading from '../Loading/Loading'\r\nimport GlobalState from '../../types/GlobalState'\r\n\r\ntype SheetsMediaGridProps = {}\r\n\r\nconst SheetsMediaGrid: FunctionComponent<SheetsMediaGridProps> = ({\r\n    ...props\r\n}) => {\r\n    const [media, setMedia] = useGlobal<GlobalState>('medias')\r\n\r\n    useEffect(() => {\r\n        fetchCombinedMediaList()\r\n            .then(combined_list => {\r\n                setMedia(combined_list)\r\n            })\r\n            .catch(reason => {\r\n                console.error('Could not get media list: ', reason)\r\n            })\r\n    }, [setMedia])\r\n\r\n    const GridComp = <MediaGrid media={media} {...props} />\r\n    const LoadingComp = <Loading />\r\n    return media ? GridComp : LoadingComp\r\n}\r\n\r\nexport default SheetsMediaGrid\r\n","import React from 'react'\r\n\r\nimport './App.css'\r\nimport SheetsMediaGrid from '../components/MediaGrid/SheetsMediaGrid'\r\n\r\nfunction App() {\r\n    return <SheetsMediaGrid />\r\n}\r\n\r\nexport default App\r\n","import React, { useRef, useCallback, useMemo } from 'react'\r\n\r\ninterface ChaptersInputProps {\r\n    onSubmit?: (chapters: number) => void\r\n    onChange?: (chapters: number) => void\r\n    max?: number\r\n    defaultValue?: number\r\n    className?: string\r\n}\r\n\r\nfunction ChaptersInput({\r\n    max,\r\n    onSubmit,\r\n    onChange,\r\n    defaultValue = 0,\r\n    ...props\r\n}: ChaptersInputProps) {\r\n    const inputEl = useRef<HTMLInputElement>(null)\r\n    const handleSubmit = useCallback(\r\n        (e: React.FormEvent) => {\r\n            e.preventDefault()\r\n            e.stopPropagation()\r\n            const value = inputEl.current\r\n                ? Number.parseInt(inputEl.current.value)\r\n                : 0\r\n            onSubmit && onSubmit(value)\r\n        },\r\n        [onSubmit]\r\n    )\r\n\r\n    const handleChange = useCallback(\r\n        (e: React.ChangeEvent) => {\r\n            e.stopPropagation()\r\n            const value = inputEl.current\r\n                ? Number.parseInt(inputEl.current.value)\r\n                : 0\r\n            onChange && onChange(value)\r\n        },\r\n        [onChange]\r\n    )\r\n\r\n    const value = useMemo<string>(() => defaultValue.toString(), [defaultValue])\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} {...props}>\r\n            <input\r\n                type='number'\r\n                max={max}\r\n                min={0}\r\n                onChange={handleChange}\r\n                defaultValue={value}\r\n                ref={inputEl}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ChaptersInput\r\n","import React from 'react'\r\nimport styles from './MediaInfo.module.css'\r\nimport { MediaData } from '../../types/Media'\r\nimport Cover from '../Cover/Cover'\r\nimport ChaptersInput from '../ChaptersInput'\r\n\r\ninterface MediaInfoProps {\r\n    media: MediaData\r\n    className?: string\r\n}\r\n\r\nfunction MediaInfo({ className, media, ...props }: MediaInfoProps) {\r\n    return (\r\n        <div className={`${styles.container} ${className}`} {...props}>\r\n            <h1>{(media && media.title) || 'Title'}</h1>\r\n            <h2>Author</h2>\r\n\r\n            <div className={styles.grid}>\r\n                <Cover className={styles.cover} {...media} />\r\n                <ul className={styles.infoGrid}>\r\n                    <h2>Genre: Action</h2>\r\n                    <h2>Doot</h2>\r\n                </ul>\r\n                <ChaptersInput\r\n                    className={styles.bottom}\r\n                    max={media && media.chapters}\r\n                    defaultValue={media && media.chaptersread}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MediaInfo\r\n","import React from 'react'\r\nimport { useGlobal } from 'reactn'\r\n\r\nimport GlobalState from './../../types/GlobalState'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport MediaInfo from '../../components/MediaInfo/MediaInfo'\r\n\r\ntype RouteParams = {\r\n    id: string\r\n}\r\n\r\nexport function MediaInfoRoute({\r\n    match,\r\n    staticContext,\r\n    ...props\r\n}: RouteComponentProps<RouteParams>) {\r\n    const [medias] = useGlobal<GlobalState>('medias')\r\n    const media = medias && medias.find(m => m.id === match.params.id)\r\n\r\n    return media ? (\r\n        <MediaInfo media={media} {...props} />\r\n    ) : (\r\n        <h1>Nope! Not found</h1>\r\n    )\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\n\r\ntype MainLayoutProps = {\r\n    className?: String\r\n    header: React.ReactNode\r\n}\r\n\r\nconst MainLayout: FunctionComponent<MainLayoutProps> = ({\r\n    className = '',\r\n    header,\r\n    children,\r\n    ...props\r\n}) => (\r\n    <div className={`main-layout ${className}`} {...props}>\r\n        {header}\r\n        <div className='main-content'>{children}</div>\r\n    </div>\r\n)\r\n\r\nexport default MainLayout\r\n","import React from 'react'\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"mw-header\">\r\n            <h1 className=\"title\">MangaWatch</h1>\r\n            <div className=\"nav\">\r\n                <h2>User</h2>\r\n                <h2>Settings</h2>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\nimport App from '../pages/App'\r\nimport { MediaInfoRoute } from '../pages/MediaInfo/MediaInfo'\r\nimport MainLayout from '../MainLayout'\r\nimport Header from '../components/Header'\r\n\r\nfunction AppRouter() {\r\n    return (\r\n        <MainLayout header={<Header />} className='app'>\r\n            <Router basename='/mediawatch'>\r\n                <Switch>\r\n                    <Route exact path='/' name='Mangawatch' component={App} />\r\n                    <Route path='/list' />\r\n                    <Route path='/user' />\r\n                    <Route path='/media/:id' component={MediaInfoRoute} />\r\n                    <Route path='' component={() => <h1>404</h1>} />\r\n                </Switch>\r\n            </Router>\r\n        </MainLayout>\r\n    )\r\n}\r\n\r\nexport default AppRouter\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import { createProvider } from 'reactn'\r\nimport GlobalState from './types/GlobalState'\r\n\r\nconst INITIAL_STATE: GlobalState = {}\r\n\r\nconst Provider = createProvider<GlobalState>(INITIAL_STATE)\r\n\r\nexport default Provider\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport AppRouter from './routing/AppRouter'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport GlobalProvider from './GlobalProvider'\r\n\r\nReactDOM.render(\r\n    <GlobalProvider>\r\n        <AppRouter />\r\n    </GlobalProvider>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mediaInfo\":\"MediaInfo_mediaInfo__1eLkQ\",\"grid\":\"MediaInfo_grid__2IgHV\",\"contentTop\":\"MediaInfo_contentTop__3VkXo\",\"contentBottom\":\"MediaInfo_contentBottom__2Q5kY\",\"cover\":\"MediaInfo_cover__1ltHJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cover\":\"Cover_cover__2OrmH\",\"text\":\"Cover_text__2IwmS\",\"image\":\"Cover_image__3_lUE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Loading_container__1psUk\",\"text\":\"Loading_text__Bcsf8\"};"],"sourceRoot":""}